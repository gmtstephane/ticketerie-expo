/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * Ticketerie API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  LoginWithGoogleBody,
  RefreshTokenBody,
  TokenResponse,
  User
} from './model'




export const loginWithGoogle = (
    loginWithGoogleBody: LoginWithGoogleBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<TokenResponse>> => {
    
    return axios.post(
      `/api/auth/login/google/native`,
      loginWithGoogleBody,options
    );
  }



export const getLoginWithGoogleMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof loginWithGoogle>>, TError,{data: LoginWithGoogleBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof loginWithGoogle>>, TError,{data: LoginWithGoogleBody}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof loginWithGoogle>>, {data: LoginWithGoogleBody}> = (props) => {
          const {data} = props ?? {};

          return  loginWithGoogle(data,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type LoginWithGoogleMutationResult = NonNullable<Awaited<ReturnType<typeof loginWithGoogle>>>
    export type LoginWithGoogleMutationBody = LoginWithGoogleBody
    export type LoginWithGoogleMutationError = AxiosError<unknown>

    export const useLoginWithGoogle = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof loginWithGoogle>>, TError,{data: LoginWithGoogleBody}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getLoginWithGoogleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const refreshToken = (
    refreshTokenBody: RefreshTokenBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<TokenResponse>> => {
    
    return axios.post(
      `/api/auth/refresh-token`,
      refreshTokenBody,options
    );
  }



export const getRefreshTokenMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof refreshToken>>, TError,{data: RefreshTokenBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof refreshToken>>, TError,{data: RefreshTokenBody}, TContext> => {
 const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof refreshToken>>, {data: RefreshTokenBody}> = (props) => {
          const {data} = props ?? {};

          return  refreshToken(data,axiosOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type RefreshTokenMutationResult = NonNullable<Awaited<ReturnType<typeof refreshToken>>>
    export type RefreshTokenMutationBody = RefreshTokenBody
    export type RefreshTokenMutationError = AxiosError<unknown>

    export const useRefreshToken = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof refreshToken>>, TError,{data: RefreshTokenBody}, TContext>, axios?: AxiosRequestConfig}
) => {

      const mutationOptions = getRefreshTokenMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getUser = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<User>> => {
    
    return axios.get(
      `/api/user`,options
    );
  }


export const getGetUserQueryKey = () => {
    return [`/api/user`] as const;
    }

    
export const getGetUserQueryOptions = <TData = Awaited<ReturnType<typeof getUser>>, TError = AxiosError<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUser>>> = ({ signal }) => getUser({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData> & { queryKey: QueryKey }
}

export type GetUserQueryResult = NonNullable<Awaited<ReturnType<typeof getUser>>>
export type GetUserQueryError = AxiosError<unknown>

export const useGetUser = <TData = Awaited<ReturnType<typeof getUser>>, TError = AxiosError<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetUserQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




