/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * Ticketerie API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  Event,
  EventDescription,
  LoginWithGoogleBody,
  RefreshTokenBody,
  TokenResponse,
  User
} from './model'
import { customInstance } from './mutator';
import type { ErrorType, BodyType } from './mutator';



type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


export const loginWithGoogle = (
    loginWithGoogleBody: BodyType<LoginWithGoogleBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<TokenResponse>(
      {url: `/api/auth/login/google/native`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: loginWithGoogleBody
    },
      options);
    }
  


export const getLoginWithGoogleMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof loginWithGoogle>>, TError,{data: BodyType<LoginWithGoogleBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof loginWithGoogle>>, TError,{data: BodyType<LoginWithGoogleBody>}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof loginWithGoogle>>, {data: BodyType<LoginWithGoogleBody>}> = (props) => {
          const {data} = props ?? {};

          return  loginWithGoogle(data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type LoginWithGoogleMutationResult = NonNullable<Awaited<ReturnType<typeof loginWithGoogle>>>
    export type LoginWithGoogleMutationBody = BodyType<LoginWithGoogleBody>
    export type LoginWithGoogleMutationError = ErrorType<unknown>

    export const useLoginWithGoogle = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof loginWithGoogle>>, TError,{data: BodyType<LoginWithGoogleBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {

      const mutationOptions = getLoginWithGoogleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const refreshToken = (
    refreshTokenBody: BodyType<RefreshTokenBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<TokenResponse>(
      {url: `/api/auth/refresh-token`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: refreshTokenBody
    },
      options);
    }
  


export const getRefreshTokenMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof refreshToken>>, TError,{data: BodyType<RefreshTokenBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof refreshToken>>, TError,{data: BodyType<RefreshTokenBody>}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof refreshToken>>, {data: BodyType<RefreshTokenBody>}> = (props) => {
          const {data} = props ?? {};

          return  refreshToken(data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type RefreshTokenMutationResult = NonNullable<Awaited<ReturnType<typeof refreshToken>>>
    export type RefreshTokenMutationBody = BodyType<RefreshTokenBody>
    export type RefreshTokenMutationError = ErrorType<unknown>

    export const useRefreshToken = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof refreshToken>>, TError,{data: BodyType<RefreshTokenBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
) => {

      const mutationOptions = getRefreshTokenMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getUser = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<User>(
      {url: `/api/user`, method: 'GET', signal
    },
      options);
    }
  

export const getGetUserQueryKey = () => {
    return [`/api/user`] as const;
    }

    
export const getGetUserQueryOptions = <TData = Awaited<ReturnType<typeof getUser>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUser>>> = ({ signal }) => getUser(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData> & { queryKey: QueryKey }
}

export type GetUserQueryResult = NonNullable<Awaited<ReturnType<typeof getUser>>>
export type GetUserQueryError = ErrorType<unknown>

export const useGetUser = <TData = Awaited<ReturnType<typeof getUser>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetUserQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get list of events
 */
export const getEvents = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<EventDescription[]>(
      {url: `/events`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEventsQueryKey = () => {
    return [`/events`] as const;
    }

    
export const getGetEventsQueryOptions = <TData = Awaited<ReturnType<typeof getEvents>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEvents>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEventsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEvents>>> = ({ signal }) => getEvents(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEvents>>, TError, TData> & { queryKey: QueryKey }
}

export type GetEventsQueryResult = NonNullable<Awaited<ReturnType<typeof getEvents>>>
export type GetEventsQueryError = ErrorType<unknown>

/**
 * @summary Get list of events
 */
export const useGetEvents = <TData = Awaited<ReturnType<typeof getEvents>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEvents>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetEventsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get event by ID
 */
export const getEventById = (
    id: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Event>(
      {url: `/events/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetEventByIdQueryKey = (id: string,) => {
    return [`/events/${id}`] as const;
    }

    
export const getGetEventByIdQueryOptions = <TData = Awaited<ReturnType<typeof getEventById>>, TError = ErrorType<void>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventById>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetEventByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getEventById>>> = ({ signal }) => getEventById(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getEventById>>, TError, TData> & { queryKey: QueryKey }
}

export type GetEventByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getEventById>>>
export type GetEventByIdQueryError = ErrorType<void>

/**
 * @summary Get event by ID
 */
export const useGetEventById = <TData = Awaited<ReturnType<typeof getEventById>>, TError = ErrorType<void>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getEventById>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetEventByIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




